name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      approval:
        description: "Approve Liquibase changes?"
        required: true
        default: "no"
        type: choice
        options:
          - "yes"
          - "no"

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: demo_cicd
  CHANGELOG_FILE: src/main/resources/db/changelog/db.changelog-master.xml

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Gradlew Permissions
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Install SQLFluff
        run: pip install sqlfluff

      - name: Lint SQL Files with SQLFluff
        run: |
          # Find all SQL files
          SQL_FILES=$(find src/main/resources/db/changelog -name "*.sql")
          FILE_COUNT=$(echo "$SQL_FILES" | wc -w)  # Count the number of files

          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "No SQL files found for linting."
          else
            echo "$FILE_COUNT SQL file(s) found for linting."

            # Loop through each SQL file and run sqlfluff individually
            for SQL_FILE in $SQL_FILES; do
              echo "Linting file: $SQL_FILE"
              OUTPUT=$(sqlfluff lint "$SQL_FILE" --dialect=postgres 2>&1)
              LINT_EXIT_CODE=$?

              echo "Result of SQLFluff lint command for $SQL_FILE:"
              echo "$OUTPUT"

              # If sqlfluff fails (non-zero exit code), print the error and stop the build
              if [ $LINT_EXIT_CODE -ne 0 ]; then
                echo "SQL Fluff Linting failed for $SQL_FILE (exit code: $LINT_EXIT_CODE)."
                echo "Error output: $OUTPUT"
                echo "Stopping the build."
                exit 1
              fi

              # Optionally, check for specific error messages in the output
              if echo "$OUTPUT" | grep -q "error\|violation"; then
                echo "SQL Fluff Linting found issues in the SQL file $SQL_FILE."
                echo "Error output: $OUTPUT"
                echo "Stopping the build."
                exit 1
              fi
            done
          fi
      

      - name: Build Application
        run: ./gradlew clean build --info
        id: build

      - name: Run Unit and Integration Tests
        run: ./gradlew test

      - name: Preview Liquibase SQL Changes
        id: liquibase_preview
        run: |
          ./gradlew updateSQL --args="--changeLogFile=${{ env.CHANGELOG_FILE }}" > liquibase_sql_preview.txt
          echo "Preview of SQL changes:"
          cat liquibase_sql_preview.txt

      - name: Validate Liquibase Changelog
        id: liquibase_validate
        run: ./gradlew validate --args="--changeLogFile=${{ env.CHANGELOG_FILE }}"

  approval:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.approval == 'yes' || github.event.inputs.approval == 'no' }}
    steps:
      - name: Manual Approval Check
        run: |
          if [ "${{ github.event.inputs.approval }}" == "no" ]; then
            echo "Approval not granted. Failing the build."
            exit 1
          fi
          echo "Approval granted. Proceeding to apply changes."

  applyLiquibaseChanges:
    needs: approval
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.approval == 'yes' }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Gradlew Permissions
        run: chmod +x ./gradlew

      - name: Apply Liquibase Changes
        run: ./gradlew update --args="--changeLogFile=${{ env.CHANGELOG_FILE }}"



















# SQL Lint
#name: CI Pipeline
#
#on:
#  push:
#    branches:
#      - main
#  workflow_dispatch:
#    inputs:
#      approval:
#        description: "Approve Liquibase changes?"
#        required: true
#        default: "no"
#        type: choice
#        options:
#          - "yes"
#          - "no"
#
#env:
#  POSTGRES_USER: postgres
#  POSTGRES_PASSWORD: postgres
#  POSTGRES_DB: demo_cicd
#  CHANGELOG_FILE: src/main/resources/db/changelog/db.changelog-master.xml
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:13
#        env:
#          POSTGRES_USER: ${{ env.POSTGRES_USER }}
#          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
#          POSTGRES_DB: ${{ env.POSTGRES_DB }}
#        ports:
#          - 5433:5432
#        options: >-
#          --health-cmd="pg_isready -U postgres"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=5
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Set Gradlew Permissions
#        run: chmod +x ./gradlew
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle
#
#      - name: Install SQLLint
#        run: npm install -g sql-lint
#
#      - name: Lint SQL Files
#        run: |
#          # Find all SQL files
#          SQL_FILES=$(find src/main/resources/db/changelog -name "*.sql")
#          FILE_COUNT=$(echo "$SQL_FILES" | wc -w)  # Count the number of files
#
#          if [ "$FILE_COUNT" -eq 0 ]; then
#            echo "No SQL files found for linting."
#          else
#            echo "$FILE_COUNT SQL file(s) found for linting."
#
#            # Loop through each SQL file and run sql-lint individually
#            for SQL_FILE in $SQL_FILES; do
#              echo "Linting file: $SQL_FILE"
#              OUTPUT=$(sql-lint $SQL_FILE 2>&1)  # Lint the individual file
#              LINT_EXIT_CODE=$?  # Capture the exit code
#
#              echo "Result of sql-lint command for $SQL_FILE:"
#              echo "$OUTPUT"
#
#              # If sql-lint fails (non-zero exit code), stop the build
#              if [ $LINT_EXIT_CODE -ne 0 ]; then
#                echo "SQL Linting failed for $SQL_FILE (exit code: $LINT_EXIT_CODE). Stopping the build."
#                exit 1
#              fi
#
#              # Optionally, check for specific error messages in the output
#              if echo "$OUTPUT" | grep -q "error\|unable"; then
#                echo "SQL Linting failed due to errors in the SQL file $SQL_FILE. Stopping the build."
#                exit 1
#              fi
#            done
#          fi
#
#
#      #      - name: Lint SQL Files
##        run: |
##          OUTPUT=$(sql-lint src/main/resources/db/changelog/changelog2.sql)
##          echo "$OUTPUT"
##          if [ -n "$OUTPUT" ]; then
##            echo "SQL Linting failed. Stopping the build."
##            exit 1
##          fi
#
#      - name: Build Application
#        run: ./gradlew clean build --info
#        id: build
#
#      - name: Run Unit and Integration Tests
#        run: ./gradlew test
#
#      - name: Preview Liquibase SQL Changes
#        id: liquibase_preview
#        run: |
#          ./gradlew updateSQL --args="--changeLogFile=${{ env.CHANGELOG_FILE }}" > liquibase_sql_preview.txt
#          echo "Preview of SQL changes:"
#          cat liquibase_sql_preview.txt
#
#      - name: Validate Liquibase Changelog
#        id: liquibase_validate
#        run: ./gradlew validate --args="--changeLogFile=${{ env.CHANGELOG_FILE }}"
#
#  approval:
#    needs: build
#    runs-on: ubuntu-latest
#    if: ${{ github.event.inputs.approval == 'yes' || github.event.inputs.approval == 'no' }}
#    steps:
#      - name: Manual Approval Check
#        run: |
#          if [ "${{ github.event.inputs.approval }}" == "no" ]; then
#            echo "Approval not granted. Failing the build."
#            exit 1
#          fi
#          echo "Approval granted. Proceeding to apply changes."
#
#  applyLiquibaseChanges:
#    needs: approval
#    runs-on: ubuntu-latest
#    if: ${{ github.event.inputs.approval == 'yes' }}
#    services:
#      postgres:
#        image: postgres:13
#        env:
#          POSTGRES_USER: ${{ env.POSTGRES_USER }}
#          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
#          POSTGRES_DB: ${{ env.POSTGRES_DB }}
#        ports:
#          - 5433:5432
#        options: >-
#          --health-cmd="pg_isready -U postgres"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=5
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set Gradlew Permissions
#        run: chmod +x ./gradlew
#
#      - name: Apply Liquibase Changes
#        run: ./gradlew update --args="--changeLogFile=${{ env.CHANGELOG_FILE }}"