name: CI Pipeline with Manual Trigger

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: demo_cicd
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Gradlew Permissions
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build Application
        run: ./gradlew clean build --info

      - name: Run unit and integration tests
        run: ./gradlew test

  approval:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Await Manual Input for Approval
        run: |
          echo "Deployment Environment: ${{ github.event.inputs.environment }}"
          echo "Deployment Version: ${{ github.event.inputs.version }}"
          echo "Please verify the inputs and proceed with approval."
      - name: Manual Approval
        if: ${{ github.event.inputs.environment == 'production' }}
        run: |
          echo "Waiting for approval for production deployment..."
          exit 1 # Fail intentionally if manual production approval is required.

  applyLiquibaseChanges:
    needs: [build, approval]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Apply Liquibase Changes
        run: |
          echo "Applying Liquibase changes for environment: ${{ github.event.inputs.environment }}"
          ./gradlew update --args="--changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml"























#name: CI Pipeline
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:13
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: demo_cicd
#        ports:
#          - 5433:5432
#        options: >-
#          --health-cmd="pg_isready -U postgres"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=5
#    steps:
#      # Step 1: Check out the code
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      # Step 2: Set up JDK
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # Step 3a: Set executable permission for gradlew
#      - name: Set Gradlew Permissions
#        run: chmod +x ./gradlew
#
#      # Step 3b: Set up gradle cache
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle
#
#      # Step 4: Build the application with Gradle
#      - name: Build Application
#        run: ./gradlew clean build --info
#        id: build
#
#      - name: Run unit and integration tests
#        run: ./gradlew test
#
#      - name: Preview Liquibase SQL
#        id: liquibase_preview
#        run: |
#          ./gradlew updateSQL --args="--changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml" > liquibase_sql_preview.txt
#          echo "Preview the SQL changes."
#          cat liquibase_sql_preview.txt
#
#      - name: Validate Liquibase Changelog
#        id: liquibase_validate
#        run: |
#          ./gradlew validate --args="--changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml"
#
#      - name: Apply Liquibase Changes
#        run: ./gradlew update

#      - name: Set Gradlew Permissions
#        run: chmod +x ./gradlew
#
#      - name: Apply Liquibase Changes
#        run: ./gradlew update

#      - name: Liquibase Approval - Manual Input
#        id: approval
#        run: |
#          echo "Do you approve the changes to apply to the database? (yes/no)"
#          read APPROVAL
#          if [[ "$APPROVAL" != "yes" ]]; then
#            echo "Approval denied. Stopping deployment."
#            exit 1
#          fi
#          echo "Approval granted. Proceeding with database updates."
#
#      - name: Apply Liquibase Changes
#        if: steps.approval.outputs.result == 'yes'
#        run: |
#          echo "Applying Liquibase changes to the database."
#          ./gradlew update
