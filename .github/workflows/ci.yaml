name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      approval:
        description: "Approve Liquibase changes?"
        required: true
        default: "no"
        type: choice
        options:
          - "yes"
          - "no"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Gradlew Permissions
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Install SQLFluff
        run: pip install sqlfluff

      - name: Lint All SQL Files with SQLFluff
        run: |
          echo "Searching for SQL files in src/main/resources/db/changelog..."
          SQL_FILES=$(find src/main/resources/db/changelog -name "*.sql")

          if [ -z "$SQL_FILES" ]; then
            echo "No SQL files found for linting."
            exit 0
          fi

          echo "SQL files found:"
          echo "$SQL_FILES"

          # Initialize a flag to track if any file fails
          LINT_FAILED=false

          # Loop through each SQL file and lint
          for SQL_FILE in $SQL_FILES; do
            echo "Linting file: $SQL_FILE"
            sqlfluff lint "$SQL_FILE" --dialect=postgres || LINT_FAILED=true
          done

          # If any linting failed, exit with an error
          if [ "$LINT_FAILED" = true ]; then
            echo "One or more SQL files failed linting. Check the errors above."
            exit 1
          else
            echo "All SQL files passed linting. ðŸŽ‰"
          fi
      

      - name: Build Application
        run: ./gradlew clean build --info
        id: build

      - name: Run Unit and Integration Tests
        run: ./gradlew test

      - name: Preview Liquibase SQL Changes
        id: liquibase_preview
        run: |
          ./gradlew updateSQL --args="--changeLogFile=${{ env.CHANGELOG_FILE }}" > liquibase_sql_preview.txt
          echo "Preview of SQL changes:"
          cat liquibase_sql_preview.txt

      - name: Validate Liquibase Changelog
        id: liquibase_validate
        run: ./gradlew validate --args="--changeLogFile=${{ env.CHANGELOG_FILE }}"

  approval:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.approval == 'yes' || github.event.inputs.approval == 'no' }}
    steps:
      - name: Manual Approval Check
        run: |
          if [ "${{ github.event.inputs.approval }}" == "no" ]; then
            echo "Approval not granted. Failing the build."
            exit 1
          fi
          echo "Approval granted. Proceeding to apply changes."

  applyLiquibaseChanges:
    needs: approval
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.approval == 'yes' }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Gradlew Permissions
        run: chmod +x ./gradlew

      - name: Apply Liquibase Changes
        run: ./gradlew update --args="--changeLogFile=${{ env.CHANGELOG_FILE }}"
